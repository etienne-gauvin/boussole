(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Compass = function () {
		function Compass(element) {
				_classCallCheck(this, Compass);

				this.needleElement = element.querySelector('.red.needle');

				// Last angle
				this.targetedAngle = 0;

				// Visual angle of the needle
				this.visibleAngle = 0;

				// Needle velocity 
				this.velocity = 0;

				// Last time a frame was updated
				this.lastTime = +new Date();

				// Last time the velocity was updated
				this.lastVelocityUpdateTime = -Infinity;
		}

		/**
   * Évènements
   */


		_createClass(Compass, [{
				key: 'start',
				value: function start() {

						window.requestAnimationFrame(this.update.bind(this));
				}

				/**
     * Nouvel angle donné par le device
     * @param <Number> angle
     */

		}, {
				key: 'updateVelocity',


				/** 
     * Updating velocity
     * Separate from display update for performance
     */
				value: function updateVelocity() {

						var diff = _utils2.default.calculateAngleBetweenDirections(this.targetedAngle, this.visibleAngle);

						this.velocity = this.velocity * 0.5 + diff * 2;
				}

				/**
     * Update visible angle of the needle
     * @param <Number> time
     */

		}, {
				key: 'update',
				value: function update(time) {

						this.visibleAngle += this.velocity * ((time - this.lastTime) / 1000);

						this.needleElement.style.transform = 'rotate(' + this.visibleAngle + 'deg)';

						this.lastTime = time;

						if (time - this.lastVelocityUpdateTime > 200) {

								this.lastVelocityUpdateTime = time;

								this.updateVelocity();
						}

						window.requestAnimationFrame(this.update.bind(this));
				}
		}, {
				key: 'angle',
				set: function set(angle) {

						var now = +new Date();

						// Difference between the last two angles
						var diff = _utils2.default.calculateAngleBetweenDirections(angle, this.targetedAngle);

						// New angle -+Infini
						// to avoid strange transitions
						// (the needle doing a full circle between 350° and 10°, for example)
						this.targetedAngle += diff;
				}

				/**
    * @return <Number>
     */
				,
				get: function get() {

						return this.targetedAngle;
				}
		}]);

		return Compass;
}();

exports.default = Compass;

},{"./utils":3}],2:[function(require,module,exports){
'use strict';

var _compass = require('./compass');

var _compass2 = _interopRequireDefault(_compass);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function (event) {

	var deviceDirection = 0;
	var directionToTarget = 0;

	var compass = new _compass2.default(document.querySelector('.compass'));
	compass.start();

	if (window.DeviceOrientationEvent) {

		window.addEventListener('deviceorientation', function (event) {

			deviceDirection = event.alpha;

			update();
		});
	} else console.error("La boussole n'est pas disponible.");

	if (window.navigator.geolocation) {

		window.navigator.geolocation.watchPosition(onPositionUpdateSuccess, onPositionUpdateError, {
			enableHighAccuracy: true,
			maximumAge: 30000,
			timeout: 27000
		});
	} else console.error("Le service de géolocalisation n'est pas disponible.");

	function onPositionUpdateSuccess(position) {

		var a = { latitude: 48.117342, longitude: -1.708520 };
		var b = { latitude: 48.117086, longitude: -1.696259 };

		console.log(position);

		// directionToTarget = utils.calculateDirectionToCoordinates(a, b);
		directionToTarget = _utils2.default.calculateDirectionToCoordinates(position.coords, b);

		update();
	}

	function onPositionUpdateError(error) {
		console.log(error);
	}

	function update() {

		compass.angle = deviceDirection + directionToTarget;
	}
});

},{"./compass":1,"./utils":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {

	/**
  * Calculate difference between two angles (360)
  * @param <Number> origin
  * @param <Number> target
  * @return <Number>
  */
	calculateAngleBetweenDirections: function calculateAngleBetweenDirections(origin, target) {

		var n = origin - target + 180;

		return n - Math.floor(n / 360) * 360 - 180;
	},


	/**
  * Calculate angle between two coordinates
  * @param <Coordinates> origin
  * @param <Coordinates> target
  * @return <Number> angle in degrees
  */
	calculateDirectionToCoordinates: function calculateDirectionToCoordinates(origin, target) {

		var cos = Math.cos,
		    sin = Math.sin;

		var distance = target.longitude - origin.longitude;

		var y = sin(distance) * cos(target.latitude);

		var x = cos(origin.latitude) * sin(target.latitude) - sin(origin.latitude) * cos(target.latitude) * cos(distance);

		var angle = Math.atan2(y, x);

		// Radians to degrees
		angle *= 180 / Math.PI;

		angle = (angle + 360) % 360;

		angle = 360 - angle; // count degrees counter-clockwise - remove to make clockwise

		return angle;
	}
};

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
