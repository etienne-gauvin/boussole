(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Compass = function () {
		function Compass() {
				_classCallCheck(this, Compass);

				this.needleElement = document.querySelector('.compass .red.needle');

				// Dernier angle donné
				this.lastRawAngle = 0;

				// Angle visuel de l'aiguille
				this.angle = 0;

				// Vélocité de l'aiguille
				this.velocity = 0;

				// Dernier instant enregistré d'affichage d'une frame
				this.previousTime = +new Date();

				// Dernier instant enregistré de màj de la vélocité
				this.lastVelocityUpdateTime = -Infinity;
		}

		/**
   * Évènements
   */


		_createClass(Compass, [{
				key: 'start',
				value: function start() {
						var _this = this;

						if (window && 'DeviceOrientationEvent' in window) {

								window.addEventListener('deviceorientation', function (event) {
										return _this.onCompassUpdate(event.alpha);
								});
						} else {

								console.error("La boussole n'est pas disponible.");
						}

						window.requestAnimationFrame(this.updateNeedle.bind(this));
						window.setInterval(this.updateVelocity.bind(this), 200);
				}

				/**
     * Nouvel angle donné par le device
     */

		}, {
				key: 'onCompassUpdate',
				value: function onCompassUpdate(rawAngle) {

						var now = +new Date();

						// Différence entre les deux derniers angles
						var diff = this.getDiffBetweenAngles(rawAngle, this.lastRawAngle);

						// Nouvel angle -+Infini
						// pour éviter les transitions étranges
						// (l'aiguille qui fait le tour du cadran, par ex.)
						this.lastRawAngle += diff;
				}

				/** 
     * Mise à jour de la vélocité de l'aiguille
     * Séparée de la requestAnimationFrame pour ne pas surcharger
     */

		}, {
				key: 'updateVelocity',
				value: function updateVelocity() {

						var diff = this.getDiffBetweenAngles(this.lastRawAngle, this.angle);

						this.velocity = this.velocity * 0.5 + diff * 2;
				}

				/**
     * Mise à jour visuelle de l'aiguille
     * @param <Number> time
     */

		}, {
				key: 'updateNeedle',
				value: function updateNeedle(time) {

						// Changement d'angle en fonction de la vélocité
						this.angle += this.velocity * ((time - this.previousTime) / 1000);

						// Application à l'élément visuel
						this.needleElement.style.transform = 'rotate(' + this.angle + 'deg)';

						this.previousTime = time;

						window.requestAnimationFrame(this.updateNeedle.bind(this));
				}

				/**
     * Calcul de la différence entre les deux angles (360)
     * @param <Number> a
     * @param <Number> b
     * @return <Number>
     */

		}, {
				key: 'getDiffBetweenAngles',
				value: function getDiffBetweenAngles(a, b) {

						var c = a - b + 180;

						return c - Math.floor(c / 360) * 360 - 180;
				}
		}]);

		return Compass;
}();

exports.default = Compass;

},{}],2:[function(require,module,exports){
'use strict';

var _compass = require('./compass');

var _compass2 = _interopRequireDefault(_compass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener("DOMContentLoaded", function (event) {

	var compass = new _compass2.default();
	compass.start();

	if ('geolocation' in navigator) {
		window.navigator.geolocation.watchPosition(onPositionUpdateSuccess, onPositionUpdateError, {
			enableHighAccuracy: true,
			maximumAge: 30000,
			timeout: 27000
		});
	} else {
		window.alert("Le service de géolocalisation n'est pas disponible.");
	}

	function onPositionUpdateSuccess(position) {
		console.log(position);
	}

	function onPositionUpdateError(error) {
		console.log(error);
	}
});

},{"./compass":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL0FwcERhdGEvUm9hbWluZy9ucG0vbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnRcXGphdmFzY3JpcHRzXFxjb21wYXNzLmpzIiwiY2xpZW50XFxqYXZhc2NyaXB0c1xcc2NyaXB0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztJQ0FxQixPO0FBRXBCLHFCQUFjO0FBQUE7O0FBRWIsU0FBSyxhQUFMLEdBQXFCLFNBQVMsYUFBVCxDQUF1QixzQkFBdkIsQ0FBckI7O0FBRUE7QUFDQSxTQUFLLFlBQUwsR0FBb0IsQ0FBcEI7O0FBRUE7QUFDQSxTQUFLLEtBQUwsR0FBYSxDQUFiOztBQUVBO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLENBQWhCOztBQUVBO0FBQ0EsU0FBSyxZQUFMLEdBQW9CLENBQUMsSUFBSSxJQUFKLEVBQXJCOztBQUVBO0FBQ0EsU0FBSyxzQkFBTCxHQUE4QixDQUFDLFFBQS9CO0FBRUE7O0FBRUQ7Ozs7Ozs7NEJBR1E7QUFBQTs7QUFFUCxVQUFJLFVBQVUsNEJBQTRCLE1BQTFDLEVBQWtEOztBQUVqRCxlQUFPLGdCQUFQLENBQXdCLG1CQUF4QixFQUE2QyxVQUFDLEtBQUQ7QUFBQSxpQkFFNUMsTUFBSyxlQUFMLENBQXFCLE1BQU0sS0FBM0IsQ0FGNEM7QUFBQSxTQUE3QztBQU1BLE9BUkQsTUFVSzs7QUFFSixnQkFBUSxLQUFSLENBQWMsbUNBQWQ7QUFFQTs7QUFFRCxhQUFPLHFCQUFQLENBQTZCLEtBQUssWUFBTCxDQUFrQixJQUFsQixDQUF1QixJQUF2QixDQUE3QjtBQUNBLGFBQU8sV0FBUCxDQUFtQixLQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBbkIsRUFBbUQsR0FBbkQ7QUFFQTs7QUFFRDs7Ozs7O29DQUdnQixRLEVBQVU7O0FBRXpCLFVBQU0sTUFBTSxDQUFDLElBQUksSUFBSixFQUFiOztBQUVBO0FBQ0EsVUFBSSxPQUFPLEtBQUssb0JBQUwsQ0FBMEIsUUFBMUIsRUFBb0MsS0FBSyxZQUF6QyxDQUFYOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQUssWUFBTCxJQUFxQixJQUFyQjtBQUVBOztBQUVEOzs7Ozs7O3FDQUlpQjs7QUFFaEIsVUFBTSxPQUFPLEtBQUssb0JBQUwsQ0FBMEIsS0FBSyxZQUEvQixFQUE2QyxLQUFLLEtBQWxELENBQWI7O0FBRUEsV0FBSyxRQUFMLEdBQWdCLEtBQUssUUFBTCxHQUFnQixHQUFoQixHQUFzQixPQUFPLENBQTdDO0FBRUE7O0FBRUQ7Ozs7Ozs7aUNBSWEsSSxFQUFNOztBQUVsQjtBQUNBLFdBQUssS0FBTCxJQUFjLEtBQUssUUFBTCxJQUFpQixDQUFDLE9BQU8sS0FBSyxZQUFiLElBQTZCLElBQTlDLENBQWQ7O0FBRUE7QUFDQSxXQUFLLGFBQUwsQ0FBbUIsS0FBbkIsQ0FBeUIsU0FBekIsZUFBK0MsS0FBSyxLQUFwRDs7QUFFQSxXQUFLLFlBQUwsR0FBb0IsSUFBcEI7O0FBRUEsYUFBTyxxQkFBUCxDQUE2QixLQUFLLFlBQUwsQ0FBa0IsSUFBbEIsQ0FBdUIsSUFBdkIsQ0FBN0I7QUFFQTs7QUFFRDs7Ozs7Ozs7O3lDQU1xQixDLEVBQUcsQyxFQUFHOztBQUUxQixVQUFNLElBQUksSUFBSSxDQUFKLEdBQVEsR0FBbEI7O0FBRUEsYUFBUSxJQUFJLEtBQUssS0FBTCxDQUFXLElBQUksR0FBZixJQUFzQixHQUEzQixHQUFrQyxHQUF6QztBQUVBOzs7Ozs7a0JBNUdtQixPOzs7OztBQ0FyQjs7Ozs7O0FBRUEsU0FBUyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsVUFBQyxLQUFELEVBQVc7O0FBRXhELEtBQU0sVUFBVSx1QkFBaEI7QUFDQSxTQUFRLEtBQVI7O0FBRUEsS0FBSSxpQkFBaUIsU0FBckIsRUFBZ0M7QUFDL0IsU0FBTyxTQUFQLENBQWlCLFdBQWpCLENBQTZCLGFBQTdCLENBQ0MsdUJBREQsRUFFQyxxQkFGRCxFQUdDO0FBQ0MsdUJBQW9CLElBRHJCO0FBRUMsZUFBWSxLQUZiO0FBR0MsWUFBUztBQUhWLEdBSEQ7QUFTQSxFQVZELE1BV0s7QUFDSixTQUFPLEtBQVAsQ0FBYSxxREFBYjtBQUNBOztBQUVELFVBQVMsdUJBQVQsQ0FBaUMsUUFBakMsRUFBMkM7QUFDMUMsVUFBUSxHQUFSLENBQVksUUFBWjtBQUNBOztBQUVELFVBQVMscUJBQVQsQ0FBK0IsS0FBL0IsRUFBc0M7QUFDckMsVUFBUSxHQUFSLENBQVksS0FBWjtBQUNBO0FBRUQsQ0E1QkQiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGFzcyB7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0XHJcblx0XHR0aGlzLm5lZWRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29tcGFzcyAucmVkLm5lZWRsZScpXHJcblx0XHRcclxuXHRcdC8vIERlcm5pZXIgYW5nbGUgZG9ubsOpXHJcblx0XHR0aGlzLmxhc3RSYXdBbmdsZSA9IDBcclxuXHJcblx0XHQvLyBBbmdsZSB2aXN1ZWwgZGUgbCdhaWd1aWxsZVxyXG5cdFx0dGhpcy5hbmdsZSA9IDBcclxuXHJcblx0XHQvLyBWw6lsb2NpdMOpIGRlIGwnYWlndWlsbGVcclxuXHRcdHRoaXMudmVsb2NpdHkgPSAwXHJcblxyXG5cdFx0Ly8gRGVybmllciBpbnN0YW50IGVucmVnaXN0csOpIGQnYWZmaWNoYWdlIGQndW5lIGZyYW1lXHJcblx0XHR0aGlzLnByZXZpb3VzVGltZSA9ICtuZXcgRGF0ZVxyXG5cclxuXHRcdC8vIERlcm5pZXIgaW5zdGFudCBlbnJlZ2lzdHLDqSBkZSBtw6BqIGRlIGxhIHbDqWxvY2l0w6lcclxuXHRcdHRoaXMubGFzdFZlbG9jaXR5VXBkYXRlVGltZSA9IC1JbmZpbml0eVxyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIMOJdsOobmVtZW50c1xyXG5cdCAqL1xyXG5cdHN0YXJ0KCkge1xyXG5cclxuXHRcdGlmICh3aW5kb3cgJiYgJ0RldmljZU9yaWVudGF0aW9uRXZlbnQnIGluIHdpbmRvdykge1xyXG5cdFx0XHRcclxuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZW9yaWVudGF0aW9uJywgKGV2ZW50KSA9PlxyXG5cclxuXHRcdFx0XHR0aGlzLm9uQ29tcGFzc1VwZGF0ZShldmVudC5hbHBoYSlcclxuXHJcblx0XHRcdClcclxuXHJcblx0XHR9XHJcblx0XHRcclxuXHRcdGVsc2Uge1xyXG5cclxuXHRcdFx0Y29uc29sZS5lcnJvcihcIkxhIGJvdXNzb2xlIG4nZXN0IHBhcyBkaXNwb25pYmxlLlwiKVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMudXBkYXRlTmVlZGxlLmJpbmQodGhpcykpXHJcblx0XHR3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy51cGRhdGVWZWxvY2l0eS5iaW5kKHRoaXMpLCAyMDApXHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTm91dmVsIGFuZ2xlIGRvbm7DqSBwYXIgbGUgZGV2aWNlXHJcblx0ICovXHJcblx0b25Db21wYXNzVXBkYXRlKHJhd0FuZ2xlKSB7XHJcblxyXG5cdFx0Y29uc3Qgbm93ID0gK25ldyBEYXRlXHJcblxyXG5cdFx0Ly8gRGlmZsOpcmVuY2UgZW50cmUgbGVzIGRldXggZGVybmllcnMgYW5nbGVzXHJcblx0XHRsZXQgZGlmZiA9IHRoaXMuZ2V0RGlmZkJldHdlZW5BbmdsZXMocmF3QW5nbGUsIHRoaXMubGFzdFJhd0FuZ2xlKVxyXG5cclxuXHRcdC8vIE5vdXZlbCBhbmdsZSAtK0luZmluaVxyXG5cdFx0Ly8gcG91ciDDqXZpdGVyIGxlcyB0cmFuc2l0aW9ucyDDqXRyYW5nZXNcclxuXHRcdC8vIChsJ2FpZ3VpbGxlIHF1aSBmYWl0IGxlIHRvdXIgZHUgY2FkcmFuLCBwYXIgZXguKVxyXG5cdFx0dGhpcy5sYXN0UmF3QW5nbGUgKz0gZGlmZlxyXG5cclxuXHR9XHJcblxyXG5cdC8qKiBcclxuXHQgKiBNaXNlIMOgIGpvdXIgZGUgbGEgdsOpbG9jaXTDqSBkZSBsJ2FpZ3VpbGxlXHJcblx0ICogU8OpcGFyw6llIGRlIGxhIHJlcXVlc3RBbmltYXRpb25GcmFtZSBwb3VyIG5lIHBhcyBzdXJjaGFyZ2VyXHJcblx0ICovXHJcblx0dXBkYXRlVmVsb2NpdHkoKSB7XHJcblxyXG5cdFx0Y29uc3QgZGlmZiA9IHRoaXMuZ2V0RGlmZkJldHdlZW5BbmdsZXModGhpcy5sYXN0UmF3QW5nbGUsIHRoaXMuYW5nbGUpXHJcblx0XHRcclxuXHRcdHRoaXMudmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5ICogMC41ICsgZGlmZiAqIDJcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBNaXNlIMOgIGpvdXIgdmlzdWVsbGUgZGUgbCdhaWd1aWxsZVxyXG5cdCAqIEBwYXJhbSA8TnVtYmVyPiB0aW1lXHJcblx0ICovXHJcblx0dXBkYXRlTmVlZGxlKHRpbWUpIHtcclxuXHJcblx0XHQvLyBDaGFuZ2VtZW50IGQnYW5nbGUgZW4gZm9uY3Rpb24gZGUgbGEgdsOpbG9jaXTDqVxyXG5cdFx0dGhpcy5hbmdsZSArPSB0aGlzLnZlbG9jaXR5ICogKCh0aW1lIC0gdGhpcy5wcmV2aW91c1RpbWUpIC8gMTAwMClcclxuXHJcblx0XHQvLyBBcHBsaWNhdGlvbiDDoCBsJ8OpbMOpbWVudCB2aXN1ZWxcclxuXHRcdHRoaXMubmVlZGxlRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBgcm90YXRlKCR7dGhpcy5hbmdsZX1kZWcpYFxyXG5cclxuXHRcdHRoaXMucHJldmlvdXNUaW1lID0gdGltZVxyXG5cclxuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGVOZWVkbGUuYmluZCh0aGlzKSlcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDYWxjdWwgZGUgbGEgZGlmZsOpcmVuY2UgZW50cmUgbGVzIGRldXggYW5nbGVzICgzNjApXHJcblx0ICogQHBhcmFtIDxOdW1iZXI+IGFcclxuXHQgKiBAcGFyYW0gPE51bWJlcj4gYlxyXG5cdCAqIEByZXR1cm4gPE51bWJlcj5cclxuXHQgKi9cclxuXHRnZXREaWZmQmV0d2VlbkFuZ2xlcyhhLCBiKSB7XHJcblxyXG5cdFx0Y29uc3QgYyA9IGEgLSBiICsgMTgwXHJcblxyXG5cdFx0cmV0dXJuIChjIC0gTWF0aC5mbG9vcihjIC8gMzYwKSAqIDM2MCkgLSAxODBcclxuXHJcblx0fVxyXG5cclxufSIsImltcG9ydCBDb21wYXNzIGZyb20gJy4vY29tcGFzcydcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIChldmVudCkgPT4ge1xyXG5cclxuXHRjb25zdCBjb21wYXNzID0gbmV3IENvbXBhc3NcclxuXHRjb21wYXNzLnN0YXJ0KClcclxuXHJcblx0aWYgKCdnZW9sb2NhdGlvbicgaW4gbmF2aWdhdG9yKSB7XHJcblx0XHR3aW5kb3cubmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oXHJcblx0XHRcdG9uUG9zaXRpb25VcGRhdGVTdWNjZXNzLFxyXG5cdFx0XHRvblBvc2l0aW9uVXBkYXRlRXJyb3IsXHJcblx0XHRcdHtcclxuXHRcdFx0XHRlbmFibGVIaWdoQWNjdXJhY3k6IHRydWUsXHJcblx0XHRcdFx0bWF4aW11bUFnZTogMzAwMDAsXHJcblx0XHRcdFx0dGltZW91dDogMjcwMDBcclxuXHRcdFx0fVxyXG5cdFx0KVxyXG5cdH1cclxuXHRlbHNlIHtcclxuXHRcdHdpbmRvdy5hbGVydChcIkxlIHNlcnZpY2UgZGUgZ8Opb2xvY2FsaXNhdGlvbiBuJ2VzdCBwYXMgZGlzcG9uaWJsZS5cIilcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIG9uUG9zaXRpb25VcGRhdGVTdWNjZXNzKHBvc2l0aW9uKSB7XHJcblx0XHRjb25zb2xlLmxvZyhwb3NpdGlvbilcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIG9uUG9zaXRpb25VcGRhdGVFcnJvcihlcnJvcikge1xyXG5cdFx0Y29uc29sZS5sb2coZXJyb3IpXHJcblx0fVxyXG5cclxufSkiXX0=
