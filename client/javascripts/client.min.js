(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _compass = require('./compass');

var _compass2 = _interopRequireDefault(_compass);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Client = function () {
		function Client() {
				_classCallCheck(this, Client);

				this.socket = null;

				this.lastCoordinates = null;
				this.lastCoordinatesSentTime = -Infinity;

				this._position = 0;
				this._deviceDirection = 0;
				this._directionToTarget = 0;
				this._users = [];

				this.usersElement = document.querySelector('select[name="users"]');

				this.compass = new _compass2.default('.compass .needle');
				this.compass.start();

				this.northCompass = new _compass2.default('.compass .frame');
				this.northCompass.start();
		}

		_createClass(Client, [{
				key: 'start',
				value: function start() {
						var _this = this;

						this.reset();

						this.usersElement.addEventListener('change', function (event) {

								var option = _this.usersElement.options[_this.usersElement.selectedIndex];

								if (option && option.value) {

										console.log('Target user:', option.value);

										_this.socket.emit('target user', option.value);
								}
						});

						this.watchOrientation().then(this.watchPosition.bind(this), this.error.bind(this)).then(this.connectToServer.bind(this), this.error.bind(this));
				}

				/** 
     * @return <Promise>
     */

		}, {
				key: 'connectToServer',
				value: function connectToServer() {
						var _this2 = this;

						return new Promise(function (resolve, reject) {

								_this2.socket = io();

								var intervalFunctionId = void 0;

								_this2.socket.on('connect', function () {

										console.info('Connected to server as ' + _this2.socket.id);

										intervalFunctionId = window.setInterval(_this2.sendCoordinates.bind(_this2), 5000);

										resolve();
								});

								_this2.socket.on('users', function (users) {

										console.info('Got new user list from server:', users);

										_this2.users = users;
								});

								_this2.socket.on('direction to target', function (direction) {

										console.info('Got new direction from server:', direction);

										_this2.directionToTarget = direction;
								});

								_this2.socket.on('disconnect', function () {

										console.warn('Disconnected from server');

										_this2.users = [];
										_this2.directionToTarget = 0;

										window.clearInterval(intervalFunctionId);
								});

								_this2.socket.on('error', function (error) {

										console.error(error);

										window.clearInterval(intervalFunctionId);

										reject(error);
								});
						});
				}

				/** 
     * @return <Promise>
     */

		}, {
				key: 'watchOrientation',
				value: function watchOrientation() {
						var _this3 = this;

						console.log('Getting orientation…');

						return new Promise(function (resolve, reject) {

								if (window.DeviceOrientationEvent) {

										var gotOrientationOnce = false;

										window.addEventListener('deviceorientation', function (event) {

												_this3.deviceDirection = event.alpha;

												_this3.compass.angle = _this3.deviceDirection + _this3.directionToTarget;

												if (!gotOrientationOnce) {

														gotOrientationOnce = true;

														console.log('Got orientation!', _this3.deviceDirection);

														resolve();
												}
										});
								} else reject("La boussole n'est pas disponible.");
						});
				}
		}, {
				key: 'watchPosition',
				value: function watchPosition() {
						var _this4 = this;

						console.log('Getting position…');

						return new Promise(function (resolve, reject) {

								if (window.navigator.geolocation) {

										var parameters = {
												enableHighAccuracy: true,
												maximumAge: 30000,
												timeout: 27000
										};

										var gotPositionOnce = false;

										window.navigator.geolocation.watchPosition(function (position) {

												_this4.position = position;

												if (!gotPositionOnce) {

														gotPositionOnce = true;

														console.log('Got position!', _this4.position);

														resolve();
												}
										}, function () {
												return reject("Le service de géolocalisation n'est pas disponible.");
										}, parameters);
								} else reject("Le service de géolocalisation n'est pas disponible.");
						});
				}

				/**
     * Send coordinates
     */

		}, {
				key: 'sendCoordinates',
				value: function sendCoordinates() {

						var position = this.position;

						if (this.connected && position && position.coords) {

								var coordinates = {
										latitude: position.coords.latitude,
										longitude: position.coords.longitude
								};

								if (!this.lastCoordinates || coordinates.latitude !== this.lastCoordinates.latitude || coordinates.longitude !== this.lastCoordinates.longitude) {

										this.lastCoordinates = coordinates;

										console.log('Sending new coords to server:', coordinates);

										this.socket.emit('coordinates', coordinates);
								}
						}
				}

				/**
     * 
     */

		}, {
				key: 'reset',
				value: function reset() {

						this.users = [];
						this.directionToTarget = 0;
				}

				/**
     * 
     */

		}, {
				key: 'update',
				value: function update() {

						var now = +new Date();

						if (this.lastCoordinatesSentTime < now - 5000) {

								this.lastCoordinatesSentTime = now;
								this.sendCoordinates();
						}

						this.compass.angle = this.deviceDirection + this.directionToTarget;
						this.northCompass.angle = this.deviceDirection;
				}

				/**
     * Error
     */

		}, {
				key: 'error',
				value: function error(message) {

						console.error(message);
				}
		}, {
				key: 'directionToTarget',
				get: function get() {

						return this._directionToTarget;
				},
				set: function set(directionToTarget) {

						this._directionToTarget = directionToTarget;

						this.update();
				}
		}, {
				key: 'deviceDirection',
				get: function get() {

						return this._deviceDirection;
				},
				set: function set(deviceDirection) {

						this._deviceDirection = deviceDirection;

						this.update();
				}
		}, {
				key: 'position',
				get: function get() {

						return this._position;
				},
				set: function set(position) {

						this._position = position;

						if (position && position.coords) {

								document.querySelector('output.position').innerHTML = '\n\t\t\t\tlat: ' + Math.floor(position.coords.latitude * 1000) / 1000 + '\n\t\t\t\t<br />\n\t\t\t\tlng: ' + Math.floor(position.coords.longitude * 1000) / 1000 + '\n\t\t\t';
						}

						this.update();
				}
		}, {
				key: 'connected',
				get: function get() {

						return this.socket && this.socket.connected;
				}
		}, {
				key: 'users',
				set: function set(users) {
						var _this5 = this;

						var select = this.usersElement;
						var disabledOption = select.querySelector('option:disabled');

						if (this.socket) {

								var currentUser = users.indexOf(this.socket.id);

								if (currentUser >= 0) {

										users.splice(currentUser, 1);
								}
						}

						if (!users || users.length === 0) {

								select.setAttribute('disabled', 'true');
								select.selectedItem = disabledOption;
								disabledOption.innerHTML = disabledOption.getAttribute('data-nobody-text');
						} else {

								select.removeAttribute('disabled');
								disabledOption.innerHTML = disabledOption.getAttribute('data-target-text');
						}

						var options = Array.from(select.querySelectorAll('option.user'));

						var _loop = function _loop(o) {

								var option = options[o];
								var user = users.find(function (user) {
										return user === option.value;
								});

								if (user === null) {

										select.removeChild(option);
								}
						};

						for (var o in options) {
								_loop(o);
						}

						var _loop2 = function _loop2(u) {

								var user = users[u];

								if (user !== _this5.socket.id) {

										var _option = options.find(function (option) {
												return user === option.value;
										});

										if (!_option) {

												_option = document.createElement('option');
												_option.setAttribute('class', 'user');
												_option.setAttribute('value', user);
												_option.innerHTML = user;

												select.appendChild(_option);
										}
								}
						};

						for (var u in users) {
								_loop2(u);
						}

						this._users = users;
				},
				get: function get() {

						return this._users;
				}
		}]);

		return Client;
}();

exports.default = Client;

},{"./compass":2,"./utils":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Compass = function () {
		function Compass(needleSelector) {
				_classCallCheck(this, Compass);

				this.needleElement = document.querySelector(needleSelector);

				// Last angle
				this.targetedAngle = 0;

				// Visual angle of the needle
				this.visibleAngle = 0;

				// Needle velocity
				this.velocity = 0;

				// Last time a frame was updated
				this.lastTime = +new Date();

				// Last time the velocity was updated
				this.lastVelocityUpdateTime = -Infinity;
		}

		/**
   * Évènements
   */


		_createClass(Compass, [{
				key: 'start',
				value: function start() {

						window.requestAnimationFrame(this.update.bind(this));
				}

				/**
     * Nouvel angle donné par le device
     * @param <Number> angle
     */

		}, {
				key: 'updateVelocity',


				/** 
     * Updating velocity
     * Separate from display update for performance
     */
				value: function updateVelocity() {

						var diff = _utils2.default.calculateAngleBetweenDirections(this.targetedAngle, this.visibleAngle);

						this.velocity = this.velocity * 0.5 + diff * 2;
				}

				/**
     * Update visible angle of the needle
     * @param <Number> time
     */

		}, {
				key: 'update',
				value: function update(time) {

						this.visibleAngle += this.velocity * ((time - this.lastTime) / 1000);

						this.needleElement.style.transform = 'rotate(' + this.visibleAngle + 'deg)';

						this.lastTime = time;

						if (time - this.lastVelocityUpdateTime > 200) {

								this.lastVelocityUpdateTime = time;

								this.updateVelocity();
						}

						window.requestAnimationFrame(this.update.bind(this));
				}
		}, {
				key: 'angle',
				set: function set(angle) {

						var now = +new Date();

						// Difference between the last two angles
						var diff = _utils2.default.calculateAngleBetweenDirections(angle, this.targetedAngle);

						// New angle -+Infini
						// to avoid strange transitions
						// (the needle doing a full circle between 350° and 10°, for example)
						this.targetedAngle += diff;
				}

				/**
    * @return <Number>
     */
				,
				get: function get() {

						return this.targetedAngle;
				}
		}]);

		return Compass;
}();

exports.default = Compass;

},{"./utils":4}],3:[function(require,module,exports){
'use strict';

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

document.addEventListener('DOMContentLoaded', function (event) {

	var client = new _client2.default();

	client.start();
});

},{"./client":1}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {

	/**
  * Calculate difference between two angles (360)
  * @param <Number> origin
  * @param <Number> target
  * @return <Number>
  */
	calculateAngleBetweenDirections: function calculateAngleBetweenDirections(origin, target) {

		var n = origin - target + 180;

		return n - Math.floor(n / 360) * 360 - 180;
	},


	/**
  * Calculate angle between two coordinates
  * @param <Coordinates> origin
  * @param <Coordinates> target
  * @return <Number> angle in degrees
  */
	calculateDirectionToCoordinates: function calculateDirectionToCoordinates(origin, target) {

		var cos = Math.cos,
		    sin = Math.sin;

		var distance = target.longitude - origin.longitude;

		var y = sin(distance) * cos(target.latitude);

		var x = cos(origin.latitude) * sin(target.latitude) - sin(origin.latitude) * cos(target.latitude) * cos(distance);

		var angle = Math.atan2(y, x);

		// Radians to degrees
		angle *= 180 / Math.PI;

		angle = (angle + 360) % 360;

		angle = 360 - angle; // count degrees counter-clockwise - remove to make clockwise

		return angle;
	}
};

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL0FwcERhdGEvUm9hbWluZy9ucG0vbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjbGllbnRcXGphdmFzY3JpcHRzXFxjbGllbnQuanMiLCJjbGllbnRcXGphdmFzY3JpcHRzXFxjb21wYXNzLmpzIiwiY2xpZW50XFxqYXZhc2NyaXB0c1xcbWFpbi5qcyIsImNsaWVudFxcamF2YXNjcmlwdHNcXHV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUNBQTs7OztBQUNBOzs7Ozs7OztJQUVxQixNO0FBRXBCLG9CQUFjO0FBQUE7O0FBRWIsU0FBSyxNQUFMLEdBQWMsSUFBZDs7QUFFQSxTQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDQSxTQUFLLHVCQUFMLEdBQStCLENBQUMsUUFBaEM7O0FBRUEsU0FBSyxTQUFMLEdBQWlCLENBQWpCO0FBQ0EsU0FBSyxnQkFBTCxHQUF3QixDQUF4QjtBQUNBLFNBQUssa0JBQUwsR0FBMEIsQ0FBMUI7QUFDQSxTQUFLLE1BQUwsR0FBYyxFQUFkOztBQUVBLFNBQUssWUFBTCxHQUFvQixTQUFTLGFBQVQsQ0FBdUIsc0JBQXZCLENBQXBCOztBQUVBLFNBQUssT0FBTCxHQUFlLHNCQUFZLGtCQUFaLENBQWY7QUFDQSxTQUFLLE9BQUwsQ0FBYSxLQUFiOztBQUVBLFNBQUssWUFBTCxHQUFvQixzQkFBWSxpQkFBWixDQUFwQjtBQUNBLFNBQUssWUFBTCxDQUFrQixLQUFsQjtBQUVBOzs7OzRCQTRJTztBQUFBOztBQUVQLFdBQUssS0FBTDs7QUFFQSxXQUFLLFlBQUwsQ0FBa0IsZ0JBQWxCLENBQW1DLFFBQW5DLEVBQTZDLGlCQUFTOztBQUVyRCxZQUFNLFNBQVMsTUFBSyxZQUFMLENBQWtCLE9BQWxCLENBQTBCLE1BQUssWUFBTCxDQUFrQixhQUE1QyxDQUFmOztBQUVBLFlBQUksVUFBVSxPQUFPLEtBQXJCLEVBQTRCOztBQUUzQixr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UjFCLEVBUWtDOztBQUUvQyxNQUFNLElBQUksU0FBUyxNQUFULEdBQWtCLEdBQTVCOztBQUVBLFNBQVEsSUFBSSxLQUFLLEtBQUwsQ0FBVyxJQUFJLEdBQWYsSUFBc0IsR0FBM0IsR0FBa0MsR0FBekM7QUFFQSxFQWRhOzs7QUFnQmQ7Ozs7OztBQU1BLGdDQXRCYywyQ0FzQmtCLE1BdEJsQixFQXNCMEIsTUF0QjFCLEVBc0JrQzs7QUFFL0MsTUFBTSxNQUFNLEtBQUssR0FBakI7QUFBQSxNQUFzQixNQUFNLEtBQUssR0FBakM7O0FBRUEsTUFBTSxXQUFZLE9BQU8sU0FBUCxHQUFtQixPQUFPLFNBQTVDOztBQUVBLE1BQU0sSUFBSSxJQUFJLFFBQUosSUFBZ0IsSUFBSSxPQUFPLFFBQVgsQ0FBMUI7O0FBRUEsTUFBTSxJQUFJLElBQUksT0FBTyxRQUFYLElBQXVCLElBQUksT0FBTyxRQUFYLENBQXZCLEdBQ04sSUFBSSxPQUFPLFFBQVgsSUFBdUIsSUFBSSxPQUFPLFFBQVgsQ0FBdkIsR0FDQSxJQUFJLFFBQUosQ0FGSjs7QUFJRyxNQUFJLFFBQVEsS0FBSyxLQUFMLENBQVcsQ0FBWCxFQUFjLENBQWQsQ0FBWjs7QUFFQTtBQUNBLFdBQVMsTUFBTSxLQUFLLEVBQXBCOztBQUVBLFVBQVEsQ0FBQyxRQUFRLEdBQVQsSUFBZ0IsR0FBeEI7O0FBRUEsVUFBUSxNQUFNLEtBQWQsQ0FuQjRDLENBbUJ2Qjs7QUFFckIsU0FBTyxLQUFQO0FBQ0g7QUE1Q2EsQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJpbXBvcnQgQ29tcGFzcyBmcm9tICcuL2NvbXBhc3MnXHJcbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xpZW50IHtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRcclxuXHRcdHRoaXMuc29ja2V0ID0gbnVsbFxyXG5cclxuXHRcdHRoaXMubGFzdENvb3JkaW5hdGVzID0gbnVsbFxyXG5cdFx0dGhpcy5sYXN0Q29vcmRpbmF0ZXNTZW50VGltZSA9IC1JbmZpbml0eVxyXG5cclxuXHRcdHRoaXMuX3Bvc2l0aW9uID0gMFxyXG5cdFx0dGhpcy5fZGV2aWNlRGlyZWN0aW9uID0gMFxyXG5cdFx0dGhpcy5fZGlyZWN0aW9uVG9UYXJnZXQgPSAwXHJcblx0XHR0aGlzLl91c2VycyA9IFtdXHJcblxyXG5cdFx0dGhpcy51c2Vyc0VsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzZWxlY3RbbmFtZT1cInVzZXJzXCJdJylcclxuXHJcblx0XHR0aGlzLmNvbXBhc3MgPSBuZXcgQ29tcGFzcygnLmNvbXBhc3MgLm5lZWRsZScpXHJcblx0XHR0aGlzLmNvbXBhc3Muc3RhcnQoKVxyXG5cclxuXHRcdHRoaXMubm9ydGhDb21wYXNzID0gbmV3IENvbXBhc3MoJy5jb21wYXNzIC5mcmFtZScpXHJcblx0XHR0aGlzLm5vcnRoQ29tcGFzcy5zdGFydCgpXHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IGRpcmVjdGlvblRvVGFyZ2V0KCkgeyBcclxuXHJcblx0XHRyZXR1cm4gdGhpcy5fZGlyZWN0aW9uVG9UYXJnZXRcclxuXHJcblx0fVxyXG5cclxuXHRzZXQgZGlyZWN0aW9uVG9UYXJnZXQoZGlyZWN0aW9uVG9UYXJnZXQpIHtcclxuXHJcblx0XHR0aGlzLl9kaXJlY3Rpb25Ub1RhcmdldCA9IGRpcmVjdGlvblRvVGFyZ2V0XHJcblxyXG5cdFx0dGhpcy51cGRhdGUoKVxyXG5cclxuXHR9XHJcblxyXG5cdGdldCBkZXZpY2VEaXJlY3Rpb24oKSB7IFxyXG5cclxuXHRcdHJldHVybiB0aGlzLl9kZXZpY2VEaXJlY3Rpb25cclxuXHJcblx0fVxyXG5cclxuXHRzZXQgZGV2aWNlRGlyZWN0aW9uKGRldmljZURpcmVjdGlvbikge1xyXG5cclxuXHRcdHRoaXMuX2RldmljZURpcmVjdGlvbiA9IGRldmljZURpcmVjdGlvblxyXG5cclxuXHRcdHRoaXMudXBkYXRlKClcclxuXHJcblx0fVxyXG5cclxuXHRnZXQgcG9zaXRpb24oKSB7IFxyXG5cclxuXHRcdHJldHVybiB0aGlzLl9wb3NpdGlvblxyXG5cclxuXHR9XHJcblxyXG5cdHNldCBwb3NpdGlvbihwb3NpdGlvbikge1xyXG5cclxuXHRcdHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb25cclxuXHJcblx0XHRpZiAocG9zaXRpb24gJiYgcG9zaXRpb24uY29vcmRzKSB7XHJcblxyXG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdvdXRwdXQucG9zaXRpb24nKS5pbm5lckhUTUwgPSBgXHJcblx0XHRcdFx0bGF0OiAke01hdGguZmxvb3IocG9zaXRpb24uY29vcmRzLmxhdGl0dWRlICogMTAwMCkgLyAxMDAwfVxyXG5cdFx0XHRcdDxiciAvPlxyXG5cdFx0XHRcdGxuZzogJHtNYXRoLmZsb29yKHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUgKiAxMDAwKSAvIDEwMDB9XHJcblx0XHRcdGBcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy51cGRhdGUoKVxyXG5cclxuXHR9XHJcblxyXG5cdGdldCBjb25uZWN0ZWQoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuc29ja2V0ICYmIHRoaXMuc29ja2V0LmNvbm5lY3RlZFxyXG5cclxuXHR9XHJcblxyXG5cdHNldCB1c2Vycyh1c2Vycykge1xyXG5cclxuXHRcdGNvbnN0IHNlbGVjdCA9IHRoaXMudXNlcnNFbGVtZW50XHJcblx0XHRjb25zdCBkaXNhYmxlZE9wdGlvbiA9IHNlbGVjdC5xdWVyeVNlbGVjdG9yKCdvcHRpb246ZGlzYWJsZWQnKVxyXG5cclxuXHRcdGlmICh0aGlzLnNvY2tldCkge1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uc3QgY3VycmVudFVzZXIgPSB1c2Vycy5pbmRleE9mKHRoaXMuc29ja2V0LmlkKVxyXG5cclxuXHRcdFx0aWYgKGN1cnJlbnRVc2VyID49IDApIHtcclxuXHJcblx0XHRcdFx0dXNlcnMuc3BsaWNlKGN1cnJlbnRVc2VyLCAxKVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIXVzZXJzIHx8IHVzZXJzLmxlbmd0aCA9PT0gMCkge1xyXG5cclxuXHRcdFx0c2VsZWN0LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCAndHJ1ZScpXHJcblx0XHRcdHNlbGVjdC5zZWxlY3RlZEl0ZW0gPSBkaXNhYmxlZE9wdGlvblxyXG5cdFx0XHRkaXNhYmxlZE9wdGlvbi5pbm5lckhUTUwgPSBkaXNhYmxlZE9wdGlvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtbm9ib2R5LXRleHQnKVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRlbHNlIHtcclxuXHJcblx0XHRcdHNlbGVjdC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcclxuXHRcdFx0ZGlzYWJsZWRPcHRpb24uaW5uZXJIVE1MID0gZGlzYWJsZWRPcHRpb24uZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldC10ZXh0JylcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Y29uc3Qgb3B0aW9ucyA9IEFycmF5LmZyb20oc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJ29wdGlvbi51c2VyJykpXHJcblxyXG5cdFx0Zm9yIChsZXQgbyBpbiBvcHRpb25zKSB7XHJcblxyXG5cdFx0XHRjb25zdCBvcHRpb24gPSBvcHRpb25zW29dXHJcblx0XHRcdGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKHVzZXIgPT4gdXNlciA9PT0gb3B0aW9uLnZhbHVlKVxyXG5cclxuXHRcdFx0aWYgKHVzZXIgPT09IG51bGwpIHtcclxuXHJcblx0XHRcdFx0c2VsZWN0LnJlbW92ZUNoaWxkKG9wdGlvbilcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yIChsZXQgdSBpbiB1c2Vycykge1xyXG5cclxuXHRcdFx0Y29uc3QgdXNlciA9IHVzZXJzW3VdXHJcblx0XHRcdFxyXG5cdFx0XHRpZiAodXNlciAhPT0gdGhpcy5zb2NrZXQuaWQpIHtcclxuXHJcblx0XHRcdFx0bGV0IG9wdGlvbiA9IG9wdGlvbnMuZmluZChvcHRpb24gPT4gdXNlciA9PT0gb3B0aW9uLnZhbHVlKVxyXG5cclxuXHRcdFx0XHRpZiAoIW9wdGlvbikge1xyXG5cclxuXHRcdFx0XHRcdG9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpXHJcblx0XHRcdFx0XHRvcHRpb24uc2V0QXR0cmlidXRlKCdjbGFzcycsICd1c2VyJylcclxuXHRcdFx0XHRcdG9wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdXNlcilcclxuXHRcdFx0XHRcdG9wdGlvbi5pbm5lckhUTUwgPSB1c2VyXHJcblxyXG5cdFx0XHRcdFx0c2VsZWN0LmFwcGVuZENoaWxkKG9wdGlvbilcclxuXHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl91c2VycyA9IHVzZXJzXHJcblxyXG5cdH1cclxuXHJcblx0Z2V0IHVzZXJzKCkge1xyXG5cclxuXHRcdHJldHVybiB0aGlzLl91c2Vyc1xyXG5cclxuXHR9XHJcblxyXG5cdHN0YXJ0KCkge1xyXG5cclxuXHRcdHRoaXMucmVzZXQoKVxyXG5cclxuXHRcdHRoaXMudXNlcnNFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGV2ZW50ID0+IHtcclxuXHJcblx0XHRcdGNvbnN0IG9wdGlvbiA9IHRoaXMudXNlcnNFbGVtZW50Lm9wdGlvbnNbdGhpcy51c2Vyc0VsZW1lbnQuc2VsZWN0ZWRJbmRleF1cclxuXHJcblx0XHRcdGlmIChvcHRpb24gJiYgb3B0aW9uLnZhbHVlKSB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdUYXJnZXQgdXNlcjonLCBvcHRpb24udmFsdWUpXHJcblxyXG5cdFx0XHRcdHRoaXMuc29ja2V0LmVtaXQoJ3RhcmdldCB1c2VyJywgb3B0aW9uLnZhbHVlKVxyXG5cclxuXHRcdFx0fVxyXG5cclxuXHRcdH0pXHJcblxyXG5cdFx0dGhpcy53YXRjaE9yaWVudGF0aW9uKClcclxuXHRcdFx0LnRoZW4odGhpcy53YXRjaFBvc2l0aW9uLmJpbmQodGhpcyksIHRoaXMuZXJyb3IuYmluZCh0aGlzKSlcclxuXHRcdFx0LnRoZW4odGhpcy5jb25uZWN0VG9TZXJ2ZXIuYmluZCh0aGlzKSwgdGhpcy5lcnJvci5iaW5kKHRoaXMpKVxyXG4gXHJcblx0fVxyXG5cclxuXHQvKiogXHJcblx0ICogQHJldHVybiA8UHJvbWlzZT5cclxuXHQgKi9cclxuXHRjb25uZWN0VG9TZXJ2ZXIoKSB7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcblx0XHRcdHRoaXMuc29ja2V0ID0gaW8oKVxyXG5cclxuXHRcdFx0bGV0IGludGVydmFsRnVuY3Rpb25JZFxyXG5cclxuXHRcdFx0dGhpcy5zb2NrZXQub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUuaW5mbyhgQ29ubmVjdGVkIHRvIHNlcnZlciBhcyAke3RoaXMuc29ja2V0LmlkfWApXHJcblxyXG5cdFx0XHRcdGludGVydmFsRnVuY3Rpb25JZCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLnNlbmRDb29yZGluYXRlcy5iaW5kKHRoaXMpLCA1MDAwKVxyXG5cclxuXHRcdFx0XHRyZXNvbHZlKClcclxuXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHR0aGlzLnNvY2tldC5vbigndXNlcnMnLCAodXNlcnMpID0+IHtcclxuXHJcblx0XHRcdFx0Y29uc29sZS5pbmZvKCdHb3QgbmV3IHVzZXIgbGlzdCBmcm9tIHNlcnZlcjonLCB1c2VycylcclxuXHJcblx0XHRcdFx0dGhpcy51c2VycyA9IHVzZXJzXHJcblxyXG5cdFx0XHR9KVxyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy5zb2NrZXQub24oJ2RpcmVjdGlvbiB0byB0YXJnZXQnLCAoZGlyZWN0aW9uKSA9PiB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUuaW5mbygnR290IG5ldyBkaXJlY3Rpb24gZnJvbSBzZXJ2ZXI6JywgZGlyZWN0aW9uKVxyXG5cclxuXHRcdFx0XHR0aGlzLmRpcmVjdGlvblRvVGFyZ2V0ID0gZGlyZWN0aW9uXHJcblxyXG5cdFx0XHR9KVxyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy5zb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XHJcblxyXG5cdFx0XHRcdGNvbnNvbGUud2FybihgRGlzY29ubmVjdGVkIGZyb20gc2VydmVyYClcclxuXHJcblx0XHRcdFx0dGhpcy51c2VycyA9IFtdXHJcblx0XHRcdFx0dGhpcy5kaXJlY3Rpb25Ub1RhcmdldCA9IDBcclxuXHJcblx0XHRcdFx0d2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxGdW5jdGlvbklkKVxyXG5cclxuXHRcdFx0fSlcclxuXHRcdFx0XHJcblx0XHRcdHRoaXMuc29ja2V0Lm9uKCdlcnJvcicsIChlcnJvcikgPT4ge1xyXG5cclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGVycm9yKVxyXG5cclxuXHRcdFx0XHR3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRlcnZhbEZ1bmN0aW9uSWQpXHJcblxyXG5cdFx0XHRcdHJlamVjdChlcnJvcilcclxuXHJcblx0XHRcdH0pXHJcblxyXG5cdFx0fSlcclxuXHJcblx0fVxyXG5cclxuXHQvKiogXHJcblx0ICogQHJldHVybiA8UHJvbWlzZT5cclxuXHQgKi9cclxuXHR3YXRjaE9yaWVudGF0aW9uKCkge1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKCdHZXR0aW5nIG9yaWVudGF0aW9u4oCmJylcclxuXHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuXHRcdFx0aWYgKHdpbmRvdy5EZXZpY2VPcmllbnRhdGlvbkV2ZW50KSB7XHJcblxyXG5cdFx0XHRcdGxldCBnb3RPcmllbnRhdGlvbk9uY2UgPSBmYWxzZVxyXG5cclxuXHRcdFx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlb3JpZW50YXRpb24nLCBldmVudCA9PiB7XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5kZXZpY2VEaXJlY3Rpb24gPSBldmVudC5hbHBoYVxyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHR0aGlzLmNvbXBhc3MuYW5nbGUgPSB0aGlzLmRldmljZURpcmVjdGlvbiArIHRoaXMuZGlyZWN0aW9uVG9UYXJnZXRcclxuXHJcblx0XHRcdFx0XHRpZiAoIWdvdE9yaWVudGF0aW9uT25jZSkge1xyXG5cclxuXHRcdFx0XHRcdFx0Z290T3JpZW50YXRpb25PbmNlID0gdHJ1ZVxyXG5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0dvdCBvcmllbnRhdGlvbiEnLCB0aGlzLmRldmljZURpcmVjdGlvbilcclxuXHJcblx0XHRcdFx0XHRcdHJlc29sdmUoKVxyXG5cclxuXHRcdFx0XHRcdH0gXHJcblx0XHRcdFx0XHJcblx0XHRcdFx0fSlcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVsc2UgcmVqZWN0KFwiTGEgYm91c3NvbGUgbidlc3QgcGFzIGRpc3BvbmlibGUuXCIpXHJcblxyXG5cdFx0fSlcclxuXHJcblx0fVxyXG5cclxuXHR3YXRjaFBvc2l0aW9uKCkge1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKCdHZXR0aW5nIHBvc2l0aW9u4oCmJylcclxuXHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuXHRcdFx0aWYgKHdpbmRvdy5uYXZpZ2F0b3IuZ2VvbG9jYXRpb24pIHtcclxuXHJcblx0XHRcdFx0Y29uc3QgcGFyYW1ldGVycyA9IHtcclxuXHRcdFx0XHRcdGVuYWJsZUhpZ2hBY2N1cmFjeTogdHJ1ZSxcclxuXHRcdFx0XHRcdG1heGltdW1BZ2U6IDMwMDAwLFxyXG5cdFx0XHRcdFx0dGltZW91dDogMjcwMDBcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGxldCBnb3RQb3NpdGlvbk9uY2UgPSBmYWxzZVxyXG5cclxuXHRcdFx0XHR3aW5kb3cubmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oXHJcblx0XHRcdFx0XHRwb3NpdGlvbiA9PiB7XHJcblxyXG5cdFx0XHRcdFx0XHR0aGlzLnBvc2l0aW9uID0gcG9zaXRpb25cclxuXHJcblx0XHRcdFx0XHRcdGlmICghZ290UG9zaXRpb25PbmNlKSB7XHJcblxyXG5cdFx0XHRcdFx0XHRcdGdvdFBvc2l0aW9uT25jZSA9IHRydWVcclxuXHJcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ0dvdCBwb3NpdGlvbiEnLCB0aGlzLnBvc2l0aW9uKVxyXG5cclxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKClcclxuXHJcblx0XHRcdFx0XHRcdH0gXHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQoKSA9PiByZWplY3QoXCJMZSBzZXJ2aWNlIGRlIGfDqW9sb2NhbGlzYXRpb24gbidlc3QgcGFzIGRpc3BvbmlibGUuXCIpLFxyXG5cdFx0XHRcdFx0cGFyYW1ldGVyc1xyXG5cdFx0XHRcdClcclxuXHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGVsc2UgcmVqZWN0KFwiTGUgc2VydmljZSBkZSBnw6lvbG9jYWxpc2F0aW9uIG4nZXN0IHBhcyBkaXNwb25pYmxlLlwiKVxyXG5cclxuXHRcdH0pXHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2VuZCBjb29yZGluYXRlc1xyXG5cdCAqL1xyXG5cdHNlbmRDb29yZGluYXRlcygpIHtcclxuXHJcblx0XHRjb25zdCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb25cclxuXHJcblx0XHRpZiAodGhpcy5jb25uZWN0ZWQgJiYgcG9zaXRpb24gJiYgcG9zaXRpb24uY29vcmRzKSB7XHJcblxyXG5cdFx0XHRjb25zdCBjb29yZGluYXRlcyA9IHtcclxuXHRcdFx0XHRsYXRpdHVkZTogcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlLCBcclxuXHRcdFx0XHRsb25naXR1ZGU6IHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGVcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCF0aGlzLmxhc3RDb29yZGluYXRlcyB8fFxyXG5cdFx0XHRcdGNvb3JkaW5hdGVzLmxhdGl0dWRlICAhPT0gdGhpcy5sYXN0Q29vcmRpbmF0ZXMubGF0aXR1ZGUgfHxcclxuXHRcdFx0XHRjb29yZGluYXRlcy5sb25naXR1ZGUgIT09IHRoaXMubGFzdENvb3JkaW5hdGVzLmxvbmdpdHVkZSkge1xyXG5cclxuXHRcdFx0XHR0aGlzLmxhc3RDb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzXHJcblxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdTZW5kaW5nIG5ldyBjb29yZHMgdG8gc2VydmVyOicsIGNvb3JkaW5hdGVzKVxyXG5cclxuXHRcdFx0XHR0aGlzLnNvY2tldC5lbWl0KCdjb29yZGluYXRlcycsIGNvb3JkaW5hdGVzKVxyXG5cdFx0XHRcdFxyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFxyXG5cdCAqL1xyXG5cdHJlc2V0KCkge1xyXG5cclxuXHRcdHRoaXMudXNlcnMgPSBbXVxyXG5cdFx0dGhpcy5kaXJlY3Rpb25Ub1RhcmdldCA9IDBcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBcclxuXHQgKi9cclxuXHR1cGRhdGUoKSB7XHJcblxyXG5cdFx0Y29uc3Qgbm93ID0gK25ldyBEYXRlXHJcblxyXG5cdFx0aWYgKHRoaXMubGFzdENvb3JkaW5hdGVzU2VudFRpbWUgPCBub3cgLSA1MDAwKSB7XHJcblxyXG5cdFx0XHR0aGlzLmxhc3RDb29yZGluYXRlc1NlbnRUaW1lID0gbm93XHJcblx0XHRcdHRoaXMuc2VuZENvb3JkaW5hdGVzKClcclxuXHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5jb21wYXNzLmFuZ2xlID0gdGhpcy5kZXZpY2VEaXJlY3Rpb24gKyB0aGlzLmRpcmVjdGlvblRvVGFyZ2V0XHJcblx0XHR0aGlzLm5vcnRoQ29tcGFzcy5hbmdsZSA9IHRoaXMuZGV2aWNlRGlyZWN0aW9uXHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXJyb3JcclxuXHQgKi9cclxuXHRlcnJvcihtZXNzYWdlKSB7XHJcblxyXG5cdFx0Y29uc29sZS5lcnJvcihtZXNzYWdlKVxyXG5cclxuXHR9XHJcbn0iLCJpbXBvcnQgdXRpbHMgZnJvbSAnLi91dGlscydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBhc3Mge1xyXG5cclxuXHRjb25zdHJ1Y3RvcihuZWVkbGVTZWxlY3Rvcikge1xyXG5cdFx0XHJcblx0XHR0aGlzLm5lZWRsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5lZWRsZVNlbGVjdG9yKVxyXG5cdFx0XHJcblx0XHQvLyBMYXN0IGFuZ2xlXHJcblx0XHR0aGlzLnRhcmdldGVkQW5nbGUgPSAwXHJcblxyXG5cdFx0Ly8gVmlzdWFsIGFuZ2xlIG9mIHRoZSBuZWVkbGVcclxuXHRcdHRoaXMudmlzaWJsZUFuZ2xlID0gMFxyXG5cclxuXHRcdC8vIE5lZWRsZSB2ZWxvY2l0eVxyXG5cdFx0dGhpcy52ZWxvY2l0eSA9IDBcclxuXHJcblx0XHQvLyBMYXN0IHRpbWUgYSBmcmFtZSB3YXMgdXBkYXRlZFxyXG5cdFx0dGhpcy5sYXN0VGltZSA9ICtuZXcgRGF0ZVxyXG5cclxuXHRcdC8vIExhc3QgdGltZSB0aGUgdmVsb2NpdHkgd2FzIHVwZGF0ZWRcclxuXHRcdHRoaXMubGFzdFZlbG9jaXR5VXBkYXRlVGltZSA9IC1JbmZpbml0eVxyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIMOJdsOobmVtZW50c1xyXG5cdCAqL1xyXG5cdHN0YXJ0KCkge1xyXG5cclxuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSlcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBOb3V2ZWwgYW5nbGUgZG9ubsOpIHBhciBsZSBkZXZpY2VcclxuXHQgKiBAcGFyYW0gPE51bWJlcj4gYW5nbGVcclxuXHQgKi9cclxuXHRzZXQgYW5nbGUoYW5nbGUpIHtcclxuXHJcblx0XHRjb25zdCBub3cgPSArbmV3IERhdGVcclxuXHJcblx0XHQvLyBEaWZmZXJlbmNlIGJldHdlZW4gdGhlIGxhc3QgdHdvIGFuZ2xlc1xyXG5cdFx0bGV0IGRpZmYgPSB1dGlscy5jYWxjdWxhdGVBbmdsZUJldHdlZW5EaXJlY3Rpb25zKGFuZ2xlLCB0aGlzLnRhcmdldGVkQW5nbGUpXHJcblxyXG5cdFx0Ly8gTmV3IGFuZ2xlIC0rSW5maW5pXHJcblx0XHQvLyB0byBhdm9pZCBzdHJhbmdlIHRyYW5zaXRpb25zXHJcblx0XHQvLyAodGhlIG5lZWRsZSBkb2luZyBhIGZ1bGwgY2lyY2xlIGJldHdlZW4gMzUwwrAgYW5kIDEwwrAsIGZvciBleGFtcGxlKVxyXG5cdFx0dGhpcy50YXJnZXRlZEFuZ2xlICs9IGRpZmZcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQqIEByZXR1cm4gPE51bWJlcj5cclxuXHQgKi9cclxuXHRnZXQgYW5nbGUoKSB7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMudGFyZ2V0ZWRBbmdsZVxyXG5cclxuXHR9XHJcblxyXG5cdC8qKiBcclxuXHQgKiBVcGRhdGluZyB2ZWxvY2l0eVxyXG5cdCAqIFNlcGFyYXRlIGZyb20gZGlzcGxheSB1cGRhdGUgZm9yIHBlcmZvcm1hbmNlXHJcblx0ICovXHJcblx0dXBkYXRlVmVsb2NpdHkoKSB7XHJcblxyXG5cdFx0Y29uc3QgZGlmZiA9IHV0aWxzLmNhbGN1bGF0ZUFuZ2xlQmV0d2VlbkRpcmVjdGlvbnModGhpcy50YXJnZXRlZEFuZ2xlLCB0aGlzLnZpc2libGVBbmdsZSlcclxuXHRcdFxyXG5cdFx0dGhpcy52ZWxvY2l0eSA9IHRoaXMudmVsb2NpdHkgKiAwLjUgKyBkaWZmICogMlxyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZSB2aXNpYmxlIGFuZ2xlIG9mIHRoZSBuZWVkbGVcclxuXHQgKiBAcGFyYW0gPE51bWJlcj4gdGltZVxyXG5cdCAqL1xyXG5cdHVwZGF0ZSh0aW1lKSB7XHJcblxyXG5cdFx0dGhpcy52aXNpYmxlQW5nbGUgKz0gdGhpcy52ZWxvY2l0eSAqICgodGltZSAtIHRoaXMubGFzdFRpbWUpIC8gMTAwMClcclxuXHJcblx0XHR0aGlzLm5lZWRsZUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gYHJvdGF0ZSgke3RoaXMudmlzaWJsZUFuZ2xlfWRlZylgXHJcblxyXG5cdFx0dGhpcy5sYXN0VGltZSA9IHRpbWVcclxuXHJcblx0XHRpZiAodGltZSAtIHRoaXMubGFzdFZlbG9jaXR5VXBkYXRlVGltZSA+IDIwMCkge1xyXG5cclxuXHRcdFx0dGhpcy5sYXN0VmVsb2NpdHlVcGRhdGVUaW1lID0gdGltZVxyXG5cdFx0XHRcclxuXHRcdFx0dGhpcy51cGRhdGVWZWxvY2l0eSgpXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUuYmluZCh0aGlzKSlcclxuXHJcblx0fVxyXG5cclxufSIsImltcG9ydCBDbGllbnQgZnJvbSAnLi9jbGllbnQnXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZXZlbnQgPT4ge1xyXG5cclxuXHRjb25zdCBjbGllbnQgPSBuZXcgQ2xpZW50XHJcblxyXG5cdGNsaWVudC5zdGFydCgpXHJcblxyXG59KSIsImV4cG9ydCBkZWZhdWx0IHtcclxuXHJcblx0LyoqXHJcblx0ICogQ2FsY3VsYXRlIGRpZmZlcmVuY2UgYmV0d2VlbiB0d28gYW5nbGVzICgzNjApXHJcblx0ICogQHBhcmFtIDxOdW1iZXI+IG9yaWdpblxyXG5cdCAqIEBwYXJhbSA8TnVtYmVyPiB0YXJnZXRcclxuXHQgKiBAcmV0dXJuIDxOdW1iZXI+XHJcblx0ICovXHJcblx0Y2FsY3VsYXRlQW5nbGVCZXR3ZWVuRGlyZWN0aW9ucyhvcmlnaW4sIHRhcmdldCkge1xyXG5cclxuXHRcdGNvbnN0IG4gPSBvcmlnaW4gLSB0YXJnZXQgKyAxODBcclxuXHJcblx0XHRyZXR1cm4gKG4gLSBNYXRoLmZsb29yKG4gLyAzNjApICogMzYwKSAtIDE4MFxyXG5cclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBDYWxjdWxhdGUgYW5nbGUgYmV0d2VlbiB0d28gY29vcmRpbmF0ZXNcclxuXHQgKiBAcGFyYW0gPENvb3JkaW5hdGVzPiBvcmlnaW5cclxuXHQgKiBAcGFyYW0gPENvb3JkaW5hdGVzPiB0YXJnZXRcclxuXHQgKiBAcmV0dXJuIDxOdW1iZXI+IGFuZ2xlIGluIGRlZ3JlZXNcclxuXHQgKi9cclxuXHRjYWxjdWxhdGVEaXJlY3Rpb25Ub0Nvb3JkaW5hdGVzKG9yaWdpbiwgdGFyZ2V0KSB7XHJcblxyXG5cdFx0Y29uc3QgY29zID0gTWF0aC5jb3MsIHNpbiA9IE1hdGguc2luXHJcblxyXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSAodGFyZ2V0LmxvbmdpdHVkZSAtIG9yaWdpbi5sb25naXR1ZGUpXHJcblxyXG5cdFx0Y29uc3QgeSA9IHNpbihkaXN0YW5jZSkgKiBjb3ModGFyZ2V0LmxhdGl0dWRlKVxyXG5cclxuXHRcdGNvbnN0IHggPSBjb3Mob3JpZ2luLmxhdGl0dWRlKSAqIHNpbih0YXJnZXQubGF0aXR1ZGUpXHJcblx0XHRcdFx0LSBzaW4ob3JpZ2luLmxhdGl0dWRlKSAqIGNvcyh0YXJnZXQubGF0aXR1ZGUpXHJcblx0XHRcdFx0KiBjb3MoZGlzdGFuY2UpXHJcblxyXG5cdCAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKHksIHgpXHJcblxyXG5cdCAgICAvLyBSYWRpYW5zIHRvIGRlZ3JlZXNcclxuXHQgICAgYW5nbGUgKj0gMTgwIC8gTWF0aC5QSVxyXG5cclxuXHQgICAgYW5nbGUgPSAoYW5nbGUgKyAzNjApICUgMzYwXHJcblxyXG5cdCAgICBhbmdsZSA9IDM2MCAtIGFuZ2xlOyAvLyBjb3VudCBkZWdyZWVzIGNvdW50ZXItY2xvY2t3aXNlIC0gcmVtb3ZlIHRvIG1ha2UgY2xvY2t3aXNlXHJcblxyXG5cdCAgICByZXR1cm4gYW5nbGU7XHJcblx0fVxyXG5cclxufSJdfQ==
